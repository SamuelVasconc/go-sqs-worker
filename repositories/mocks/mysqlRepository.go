// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	"github.com/SamuelVasconc/go-sqs-worker/models"
	"github.com/stretchr/testify/mock"
)

//MysqlRepository ...
type MysqlRepository struct {
	mock.Mock
}

//SetProtocol ...
func (m *MysqlRepository) SetProtocol(status, date, protocol string, limit int) error {
	ret := m.Called(status, date, protocol, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) error); ok {
		r0 = rf(status, date, protocol, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

//GenerateProtocol ...
func (m *MysqlRepository) GenerateProtocol() (string, error) {
	ret := m.Called()
	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

//UpdateLine ...
func (m *MysqlRepository) UpdateLine(observacao, status string, id int64) error {
	ret := m.Called(observacao, status, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(observacao, status, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

//GetLines ...
func (m *MysqlRepository) GetLines(protocol string) ([]*models.Transaction, error) {
	ret := m.Called(protocol)
	var r0 []*models.Transaction
	if rf, ok := ret.Get(0).(func(string) []*models.Transaction); ok {
		r0 = rf(protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(protocol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
